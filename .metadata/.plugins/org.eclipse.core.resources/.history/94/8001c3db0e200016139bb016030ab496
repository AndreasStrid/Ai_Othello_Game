package Othello;

import java.util.ArrayList;

public class Rules
{
	private String courses[] = {"north","northeast","east","southeast","south","southwest","west","northwest"};
	private Game game;
	
	public Rules(Game game)
	{
		this.game = game;
	}
	public Game getGame()
	{
		return game;
	}

	/**
	 * This function checks if pieces shall be flipped
	 * @param board: The board which contains the pieces
	 * @param current: The player who placed the current piece
	 * @param opponent: The opponent player and his color
	 * @param i: The column position of the current placed piece
	 * @param j: The row position of the current placed piece
	 * @param course: Which direction the rules will look for flipping
	 */
	public void flipRule(GameBoard board ,Player current, Player opponent, int r, int c)
	{
		for (int i = 0; i < courses.length; i++)
		{
			// Columm is A,B,C,D, row is 1,2,3,4
			// List that will contain pieces thath shall be flipped
			ArrayList<Piece> convert = new ArrayList<>();
			// A end piece of the same color as the placed piece is needed if
			// the pieces between shall be flipped
			Piece end = null;
			String opposite_c = opponent.getColor();
			String current_c = current.getColor();

			int col = 0, row = 0;
			int a = 0, b = 0;

			// Determines which way on the board the flipsearch shall look
			switch (courses[i]) 
			{
				case "north":
					col = -1;
					row = 0;
					break;
				case "northeast":
					col = -1;
					row = 1;
					break;
				case "east":
					col = 0;
					row = 1;
					break;
				case "southeast":
					col = 1;
					row = 1;
					break;
				case "south":
					col = 1;
					row = 0;
					break;
				case "southwest":
					col = 1;
					row = -1;
					break;
				case "west":
					col = 0;
					row = -1;
					break;
				case "northwest":
					col = -1;
					row = -1;
					break;
			}
			// if m is 0, then don't search column direction, if n is 0, then
			// don't search column direction
			int m = 0, n = 0;
			// if m is negative, then look north
			if (col < 0)
				m = -1;
			// if m is positive look south
			else if (col > 0)
				m = 1;
			// if n is negative, then look west
			if (row < 0)
				n = -1;
			// if n is positive look east
			else if (row > 0)
				n = 1;
			// a and b is the current position of the current placed piece in
			// column and row + which direction it shall look at
			a = r + m;
			b = c + n;
			// Search the field for flipping opportunities
			while (a <= board.field.length - 1 && a >= 0 && b <= board.field[0].length - 1 && b >= 0)
			{
				// If there is an empty block, cancel the search
				if (board.field[a][b].checkOccupied() == false || end != null)
					break;
				// if the piece is the opponents color, add it to the the
				// convert list
				else if (board.field[a][b].getPieceColor().equals(opposite_c) && end == null)
					convert.add(board.getPieceFromBlock(a, b));
				// only flip the pieces in the convert list, if the piece start
				// with "black/white" and end with the same color
				else if (board.field[a][b].getPieceColor().equals(current_c))
					end = board.getPieceFromBlock(a, b);
				a += m;
				b += n;
			}
			// if there isn't a start and end piece of the same color, then
			// don't flip pieces
			if (end != null)
			{
				flipPiece(convert, board, current, opponent);
			}
		}
	}
	/**
	 * Flips a piece which means replace it with the other players piece
	 * @param flip_List: The list which contains pieces that shall be flipped
	 * @param board: The gameboard 
	 * @param current: The player who placed the current piece
	 * @param opponent: The opponent
	 */
	public void flipPiece(ArrayList<Piece> flip_List, GameBoard board, Player current, Player opponent)
	{
		int r = 0, c = 0;
		//Loops through the list
		for (int i = 0; i < flip_List.size(); i++)
		{
			//Column and row
			c = flip_List.get(i).getColom();
			r = flip_List.get(i).getRow();
			
			//Remove the flipped pieces from the board and set them to not in use
			opponent.pieceInUse(false, flip_List.get(i).getIndex());
			flip_List.get(i).setCord(null);
			flip_List.get(i).setXY(0, 0);
			flip_List.get(i).setColom(0);
			flip_List.get(i).setRow(0);
			//Place a piece where the flipped piece was
			System.out.println("Flip");
			placePieceBoard(board, current, r, c);
			
		}
	}
	/**
	 * Puts a piece on the gameboard
	 * Takes a piece that is not in use and sets it on a block on the gameboard
	 * @param board: The gameboard
	 * @param player: The player who placed the piece
	 * @param i: Column
	 * @param j: Row
	 */
	public void placePieceBoard(GameBoard board,Player player, int r, int c)
	{
		//Take a piece that is not in use
		Piece p = player.take_piece();
		//Gets the number of the choosen piece
		int ind = p.getIndex();
		board.setPieceOnBlock(p, r, c);
		//System.out.println(p.getColor() + p.getIndex() + " Is occ" );
		player.getPiece(ind).setCord(board.field[r][c].getCord());
		player.getPiece(ind).setXY(board.getBlockX(r,c), board.getBlockY(r,c));
		player.getPiece(ind).setColom(c); 
		player.getPiece(ind).setRow(r);
		//Prints out the board in the console
		//System.out.println(p.getCord() + " R: " + r + " C: " + c);
		System.out.println("Place" );
		game.consolePrint(board);
	}
	/**
	 * When the board is full it's game over
	 */
	public boolean gameOver(Player p1, Player bot)
	{
		//The board is full
		if(p1.getPieceCount()+bot.getPieceCount() == 16)
		{
			System.out.println("Game over");
			if(p1.getPieceCount() == 8)
				System.out.println("It's a draw");
			else if(p1.getPieceCount() > bot.getPieceCount())
				System.out.println("White player wins with: " + p1.getPieceCount() + " Pieces");
			else
				System.out.println("Black player wins with: " + bot.getPieceCount() + " Pieces");
			return true;
		}
		return false;
	}


}
